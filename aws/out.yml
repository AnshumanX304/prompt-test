AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Full LLM Stack
Parameters:
  QueueName:
    Type: String
    Description: Name of the SQS queue
    Default: llm-queue
Resources:
  MyDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Fn::Sub: ${QueueName}-dlq
      MessageRetentionPeriod: 1209600
  MySQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Ref: QueueName
      VisibilityTimeout: 1000
      MessageRetentionPeriod: 345600
      DelaySeconds: 0
      ReceiveMessageWaitTimeSeconds: 0
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
          - MyDLQ
          - Arn
        maxReceiveCount: 1
  SQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
      - Ref: MySQSQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: cloudwatch.amazonaws.com
          Action:
          - sqs:SendMessage
          Resource:
            Fn::GetAtt:
            - MySQSQueue
            - Arn
  SQSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/sqs/${QueueName}
      RetentionInDays: 7
  SQSMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        Ref: SQSLogGroup
      FilterPattern: ''
      MetricTransformations:
      - MetricNamespace: SQSMetrics
        MetricName: MessageCount
        MetricValue: '1'
  SolutionsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_solutions.lambda_handler
      Runtime: python3.8
      CodeUri: s3://wapify-llm-stack/3a43d4993263328f83aeeeb04e1cb248
      Description: lambda for solutions
      Timeout: 100
      MemorySize: 180
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Policies:
      - AWSLambdaBasicExecutionRole
      - AWSLambda_ReadOnlyAccess
      - AWSXrayWriteOnlyAccess
      Tracing: Active
      Layers:
      - Ref: libs
      Environment:
        Variables:
          AWS_CLOUDFORMATION_STACK_NAME:
            Ref: AWS::StackName
          SECRET_NAME: llmapp
  libs:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: blank-python-lib
      Description: Dependencies for the blank-python sample app.
      ContentUri: s3://wapify-llm-stack/68ae853140fe8ffb66f8af075a087d75
      CompatibleRuntimes:
      - python3.8
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: SecretsManagerAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            Resource:
              Fn::Sub: arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:llmapp-*
      - PolicyName: SQSReceiveMessagePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
            Resource:
              Fn::GetAtt:
              - MySQSQueue
              - Arn
  LambdaSQSPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: SolutionsLambda
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - MySQSQueue
        - Arn
  SQSLambdaTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn:
        Fn::GetAtt:
        - MySQSQueue
        - Arn
      FunctionName:
        Ref: SolutionsLambda
      BatchSize: 10
      ScalingConfig:
        MaximumConcurrency: 5
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${SolutionsLambda}
      RetentionInDays: 7
Outputs:
  QueueURL:
    Description: URL of the created SQS Queue
    Value:
      Ref: MySQSQueue
  QueueARN:
    Description: ARN of the created SQS Queue
    Value:
      Fn::GetAtt:
      - MySQSQueue
      - Arn
  LambdaFunctionARN:
    Description: ARN of the Lambda Function
    Value:
      Fn::GetAtt:
      - SolutionsLambda
      - Arn
  SQSLogGroupARN:
    Description: ARN of the CloudWatch Log Group for SQS
    Value:
      Fn::GetAtt:
      - SQSLogGroup
      - Arn
